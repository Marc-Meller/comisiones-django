from django.contrib.auth.decorators import login_required
from django.contrib.admin.views.decorators import staff_member_required

from django.http import Http404
from django.shortcuts import render, get_object_or_404, redirect
from django.utils import timezone


# from django.utils import timezone

# Create your views here.
from .models import blogPost
# from .forms import blogPostForm
from .forms import blogPostModelForm


# def blog_post_details_page (request, slug):
    # queryset = blogPost.objects.filter(slug= slug)
    # if queryset.count() == 0:
    #     raise Http404
    
    # obj = queryset.first()
    
    # print(post_id.__class__)
    # obj = get_object_or_404(blogPost, slug=slug)
    # try:
    #     obj = blogPost.objects.get(id = str(post_id))
    # except blogPost.DoesNotExist:
    #     raise Http404
    # except ValueError:
    #     raise Http404
    # obj = get_object_or_404(blogPost, slug=slug)
    # template_name = 'blog_post_details.html'
    # context = {"object": obj} #{"title": obj.title}
    # return render(request, template_name, context)



# CRUD # CREATE READ UPDATE DELETE




def blog_post_list_view (request):
    # Mostrar  todos los objetos
    # Buscarlos
    
    # now = timezone.now()
    # qs = blogPost.objects.all()
    qs = blogPost.objects.all().published()
    if request.user.is_authenticated:
        my_qs = blogPost.objects.filter(user=request.user)
        qs = (qs | my_qs).distinct()
    # qs = blogPost.objects.filter(publish_date__lte=now)
    
    template_name = 'blog/list.html'
    context = {"object_list": qs}
    return render(request, template_name, context)


# @login_required(login_url= "/login")

# @login_required
@staff_member_required
def blog_post_create_view (request):
    # Crear objetos nuevos para la BD
    # usaremos un formulario
    form = blogPostModelForm(request.POST or None, request.FILES or None)
    if form.is_valid():
        # print(form.cleaned_data)
        # title = form.cleaned_data['title']
        # obj = blogPost.objects.create(**form.cleaned_data)
        
        
        #Resolver la atenticacion en lugar de los decoradores
        # if not request.user.is_aunthenticated:
        #     return render(request, "not-a-user.html", {})
        
        obj = form.save(commit=False)
        obj.user = request.user
        obj.save()
        # Manipular datos del formulario antes de guardarlo 
        # obj = form.save(commit=False)
        # obj.title = form.cleaned_data.get("title") + "0"
        # obj.save()
        # form.save()
        form = blogPostModelForm()
        # obj = blogPost.objects.create(title=title)
        #Esto es para poder envir una misma informacion a varios modelos
        # obj2 = otroModelo.objects.create(title=title) 
    template_name = 'form.html'
    context = {"form": form}
    return render(request, template_name, context)

def blog_post_detail_view (request, slug):
    # 1 objeto o vista detalla de un solo objeto
    obj = get_object_or_404(blogPost, slug=slug)
    template_name = 'blog/details.html'
    context = {"object": obj}
    return render(request, template_name, context)

@staff_member_required
def blog_post_update_view(request, slug):
    obj = get_object_or_404(blogPost, slug=slug)
    
    if request.method == 'POST':
        form = blogPostModelForm(request.POST, request.FILES, instance=obj)
        if form.is_valid():
            # Obtiene la instancia del objeto sin guardar cambios en la BD
            obj = form.save(commit=False)
            
            # Obtiene la fecha actual del campo publish_date y actualiza solo la parte de fecha
            existing_publish_date = obj.publish_date
            new_date = form.cleaned_data['publish_date']
            obj.publish_date = timezone.datetime.combine(new_date, existing_publish_date.time())

            # Guarda los cambios actualizados
            obj.save()
            # return HttpResponseRedirect('...')  # Redirige a donde corresponda después de la actualización

    else:
        form = blogPostModelForm(instance=obj)  # Carga el formulario con los datos existentes
    
    template_name = 'form.html'
    context = {'title': f"Update {obj.title}", "form": form}
    return render(request, template_name, context)

# def blog_post_update_view (request,slug):
#     obj = get_object_or_404(blogPost, slug=slug)
#     form = blogPostModelForm(request.POST or None, request.FILES or None, instance=obj, )
#     if form.is_valid():
#         form.save()
#     template_name = 'form.html'
#     context = {'title': f"Update {obj.title}", "form": form, }
#     return render(request, template_name, context)

@staff_member_required
def blog_post_delete_view (request,slug):
    obj = get_object_or_404(blogPost, slug=slug)
    template_name = 'blog/delete.html'
    if request.method == "POST":
        obj.delete()
        return redirect("/blog")
    context = {"object": obj}
    return render(request, template_name, context)